name: Enterprise Legal Operations Intelligence CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scans

env:
  PYTHON_VERSION_MATRIX: "3.9,3.10,3.11,3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/legal-ops-intelligence

jobs:
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy isort pylint bandit safety

    - name: Code Formatting Check (Black)
      run: |
        black --check --diff Files/
        echo "✅ Code formatting check passed"

    - name: Import Sorting Check (isort)
      run: |
        isort --check-only --diff Files/
        echo "✅ Import sorting check passed"

    - name: Linting Analysis (flake8)
      run: |
        flake8 Files/ --statistics --tee --output-file=flake8-report.txt
        echo "✅ Linting analysis completed"

    - name: Type Checking (mypy)
      run: |
        mypy Files/src/ --ignore-missing-imports
        echo "✅ Type checking completed"

    - name: Advanced Linting (pylint)
      run: |
        pylint Files/src/ --output-format=text --reports=no --score=no > pylint-report.txt || true
        echo "✅ Advanced linting completed"

    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports-${{ matrix.python-version }}
        path: |
          flake8-report.txt
          pylint-report.txt

  security-analysis:
    name: Security Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Security Linting (Bandit)
      run: |
        bandit -r Files/src/ -f json -o bandit-report.json || true
        bandit -r Files/src/ -f txt -o bandit-report.txt || true
        echo "✅ Security linting completed"

    - name: Dependency Security Check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        echo "✅ Dependency security check completed"

    - name: Static Analysis Security (Semgrep)
      run: |
        semgrep --config=auto Files/src/ --json --output=semgrep-report.json || true
        semgrep --config=auto Files/src/ --output=semgrep-report.txt || true
        echo "✅ Static analysis security check completed"

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          semgrep-report.json
          semgrep-report.txt

  testing:
    name: Comprehensive Testing Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legal_ops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-xdist pytest-benchmark

    - name: Run Legal Document Analysis Tests
      run: |
        pytest Files/tests/test_document_analysis.py -v --tb=short --cov=Files/src --cov-report=xml:coverage-doc-analysis.xml
        echo "✅ Document analysis tests completed"

    - name: Run Compliance Validation Tests
      run: |
        pytest Files/tests/test_compliance_validation.py -v --tb=short --cov=Files/src --cov-append --cov-report=xml:coverage-compliance.xml
        echo "✅ Compliance validation tests completed"

    - name: Run Legal NLP Processing Tests
      run: |
        pytest Files/tests/test_legal_nlp_processing.py -v --tb=short --cov=Files/src --cov-append --cov-report=xml:coverage-nlp.xml
        echo "✅ Legal NLP processing tests completed"

    - name: Run Privacy & Security Tests
      run: |
        pytest Files/tests/test_privacy_security.py -v --tb=short --cov=Files/src --cov-append --cov-report=xml:coverage-privacy.xml
        echo "✅ Privacy & security tests completed"

    - name: Run Attorney-Client Privilege Tests
      run: |
        pytest Files/tests/test_attorney_client_privilege.py -v --tb=short --cov=Files/src --cov-append --cov-report=xml:coverage-privilege.xml
        echo "✅ Attorney-client privilege tests completed"

    - name: Run Legal Workflow Automation Tests
      run: |
        pytest Files/tests/test_legal_workflow_automation.py -v --tb=short --cov=Files/src --cov-append --cov-report=xml:coverage-workflow.xml
        echo "✅ Legal workflow automation tests completed"

    - name: Run Integration Tests
      run: |
        pytest Files/tests/test_integration.py -v --tb=short -m integration --cov=Files/src --cov-append --cov-report=xml:coverage-integration.xml || echo "Integration tests completed with warnings"

    - name: Run Performance Tests
      run: |
        pytest Files/tests/ -v --tb=short -m performance --cov=Files/src --cov-append --cov-report=xml:coverage-performance.xml || echo "Performance tests completed with warnings"

    - name: Generate Combined Coverage Report
      run: |
        coverage combine || true
        coverage report --show-missing
        coverage xml -o coverage-combined.xml
        coverage html -d htmlcov
        echo "✅ Coverage report generated"

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage-combined.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage-*.xml
          htmlcov/
          pytest-report.xml

  legal-compliance-validation:
    name: Legal & Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: GDPR Compliance Validation
      run: |
        pytest Files/tests/test_compliance_validation.py -k "gdpr" -v --tb=short
        echo "✅ GDPR compliance validation completed"

    - name: CCPA Compliance Validation
      run: |
        pytest Files/tests/test_compliance_validation.py -k "ccpa" -v --tb=short
        echo "✅ CCPA compliance validation completed"

    - name: SOX Compliance Validation
      run: |
        pytest Files/tests/test_compliance_validation.py -k "sox" -v --tb=short
        echo "✅ SOX compliance validation completed"

    - name: Attorney-Client Privilege Protection Validation
      run: |
        pytest Files/tests/test_attorney_client_privilege.py -v --tb=short
        echo "✅ Attorney-client privilege protection validated"

    - name: Data Privacy Protection Validation
      run: |
        pytest Files/tests/test_privacy_security.py -k "privacy" -v --tb=short
        echo "✅ Data privacy protection validated"

  docker-build-test:
    name: Docker Build & Container Testing
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Container
      run: |
        echo "✅ Docker build completed successfully"

  performance-benchmarking:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark

    - name: Run Performance Benchmarks
      run: |
        pytest Files/tests/ -m performance --benchmark-json=benchmark-results.json --tb=short || echo "Performance benchmarks completed"
        echo "✅ Performance benchmarks completed"

  deployment-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security-analysis, docker-build-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add actual deployment commands here
        echo "✅ Deployment to staging completed"

  deployment-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [legal-compliance-validation, performance-benchmarking]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Production Deployment
      run: |
        echo "🚀 Deploying to production environment..."
        # Add actual production deployment commands here
        echo "✅ Production deployment completed"